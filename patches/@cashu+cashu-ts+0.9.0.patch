diff --git a/node_modules/@cashu/cashu-ts/package.json b/node_modules/@cashu/cashu-ts/package.json
index 78f8fc1..a392065 100644
--- a/node_modules/@cashu/cashu-ts/package.json
+++ b/node_modules/@cashu/cashu-ts/package.json
@@ -2,8 +2,7 @@
 	"name": "@cashu/cashu-ts",
 	"version": "0.9.0",
 	"description": "cashu library for communicating with a cashu mint",
-	"main": "dist/lib/es5/index.js",
-	"module": "dist/lib/es6/index.js",
+    "main": "src/index.ts",
 	"repository": {
 		"type": "git",
 		"url": "git+https://github.com/cashubtc/cashu-ts"
@@ -47,8 +46,8 @@
 	"dependencies": {
 		"@gandlaf21/bolt11-decode": "^3.0.6",
 		"@noble/curves": "^1.0.0",
-		"@scure/bip32": "^1.3.2",
-		"@scure/bip39": "^1.2.1",
+		"@scure/bip32": "^1.3.3",
+		"@scure/bip39": "^1.2.2",
 		"buffer": "^6.0.3"
 	}
 }
diff --git a/node_modules/@cashu/cashu-ts/src/CashuMint.ts b/node_modules/@cashu/cashu-ts/src/CashuMint.ts
index f6bc3b1..3b1ca62 100644
--- a/node_modules/@cashu/cashu-ts/src/CashuMint.ts
+++ b/node_modules/@cashu/cashu-ts/src/CashuMint.ts
@@ -11,9 +11,9 @@ import {
 	SerializedBlindedSignature,
 	SplitPayload,
 	SplitResponse
-} from './model/types/index.js';
-import request from './request.js';
-import { isObj, joinUrls } from './utils.js';
+} from './model/types/index';
+import request from './request';
+import { isObj, joinUrls } from './utils';
 
 /**
  * Class represents Cashu Mint API. This class contains Lower level functions that are implemented by CashuWallet.
@@ -21,8 +21,12 @@ import { isObj, joinUrls } from './utils.js';
 class CashuMint {
 	/**
 	 * @param _mintUrl requires mint URL to create this object
+     * @param _customRequest if passed, use custom request implementation for network communication with the mint
 	 */
-	constructor(private _mintUrl: string) {}
+	constructor(
+        private _mintUrl: string,
+        private _customRequest?: typeof request    
+    ) {}
 
 	get mintUrl() {
 		return this._mintUrl;
@@ -31,14 +35,18 @@ class CashuMint {
 	 * fetches mints info at the /info endpoint
 	 * @param mintUrl
 	 */
-	public static async getInfo(mintUrl: string): Promise<GetInfoResponse> {
-		return request<GetInfoResponse>({ endpoint: joinUrls(mintUrl, 'info') });
+	public static async getInfo(
+        mintUrl: string,
+        customRequest?: typeof request
+    ): Promise<GetInfoResponse> {
+        const requestInstance = customRequest || request;
+		return requestInstance<GetInfoResponse>({ endpoint: joinUrls(mintUrl, 'info') });
 	}
 	/**
 	 * fetches mints info at the /info endpoint
 	 */
 	async getInfo(): Promise<GetInfoResponse> {
-		return CashuMint.getInfo(this._mintUrl);
+		return CashuMint.getInfo(this._mintUrl, this._customRequest);
 	}
 	/**
 	 * Starts a minting process by requesting an invoice from the mint
@@ -46,8 +54,9 @@ class CashuMint {
 	 * @param amount Amount requesting for mint.
 	 * @returns the mint will create and return a Lightning invoice for the specified amount
 	 */
-	public static async requestMint(mintUrl: string, amount: number): Promise<RequestMintResponse> {
-		return request<RequestMintResponse>({
+	public static async requestMint(mintUrl: string, amount: number, customRequest?: typeof request): Promise<RequestMintResponse> {
+        const requestInstance = customRequest || request;
+		return requestInstance<RequestMintResponse>({
 			endpoint: `${joinUrls(mintUrl, 'mint')}?amount=${amount}`
 		});
 	}
@@ -58,7 +67,7 @@ class CashuMint {
 	 * @returns the mint will create and return a Lightning invoice for the specified amount
 	 */
 	async requestMint(amount: number): Promise<RequestMintResponse> {
-		return CashuMint.requestMint(this._mintUrl, amount);
+		return CashuMint.requestMint(this._mintUrl, amount, this._customRequest);
 	}
 	/**
 	 * Requests the mint to perform token minting after the LN invoice has been paid
@@ -70,9 +79,11 @@ class CashuMint {
 	public static async mint(
 		mintUrl: string,
 		payloads: { outputs: Array<SerializedBlindedMessage> },
-		hash: string
+		hash: string,
+        customRequest?: typeof request
 	) {
-		const data = await request<{ promises: Array<SerializedBlindedSignature> }>({
+        const requestInstance = customRequest || request;
+		const data = await requestInstance<{ promises: Array<SerializedBlindedSignature> }>({
 			endpoint: `${joinUrls(mintUrl, 'mint')}?hash=${hash}`,
 			method: 'POST',
 			requestBody: payloads
@@ -91,7 +102,7 @@ class CashuMint {
 	 * @returns serialized blinded signatures
 	 */
 	async mint(payloads: { outputs: Array<SerializedBlindedMessage> }, hash: string) {
-		return CashuMint.mint(this._mintUrl, payloads, hash);
+		return CashuMint.mint(this._mintUrl, payloads, hash, this._customRequest);
 	}
 	/**
 	 * Get the mints public keys
@@ -99,12 +110,13 @@ class CashuMint {
 	 * @param keysetId optional param to get the keys for a specific keyset. If not specified, the keys from the active keyset are fetched
 	 * @returns
 	 */
-	public static async getKeys(mintUrl: string, keysetId?: string): Promise<MintKeys> {
+	public static async getKeys(mintUrl: string, keysetId?: string, customRequest?: typeof request): Promise<MintKeys> {
 		if (keysetId) {
 			// make the keysetId url safe
 			keysetId = keysetId.replace(/\//g, '_').replace(/\+/g, '-');
 		}
-		return request<MintKeys>({
+        const requestInstance = customRequest || request;
+		return requestInstance<MintKeys>({
 			endpoint: keysetId ? joinUrls(mintUrl, 'keys', keysetId) : joinUrls(mintUrl, 'keys')
 		});
 	}
@@ -114,15 +126,16 @@ class CashuMint {
 	 * @returns the mints public keys
 	 */
 	async getKeys(keysetId?: string): Promise<MintKeys> {
-		return CashuMint.getKeys(this._mintUrl, keysetId);
+		return CashuMint.getKeys(this._mintUrl, keysetId, this._customRequest);
 	}
 	/**
 	 * Get the mints keysets in no specific order
 	 * @param mintUrl
 	 * @returns all the mints past and current keysets.
 	 */
-	public static async getKeySets(mintUrl: string): Promise<{ keysets: Array<string> }> {
-		return request<{ keysets: Array<string> }>({ endpoint: joinUrls(mintUrl, 'keysets') });
+	public static async getKeySets(mintUrl: string, customRequest?: typeof request): Promise<{ keysets: Array<string> }> {
+        const requestInstance = customRequest || request;
+		return requestInstance<{ keysets: Array<string> }>({ endpoint: joinUrls(mintUrl, 'keysets') });
 	}
 
 	/**
@@ -130,7 +143,7 @@ class CashuMint {
 	 * @returns all the mints past and current keysets.
 	 */
 	async getKeySets(): Promise<{ keysets: Array<string> }> {
-		return CashuMint.getKeySets(this._mintUrl);
+		return CashuMint.getKeySets(this._mintUrl, this._customRequest);
 	}
 
 	/**
@@ -139,8 +152,9 @@ class CashuMint {
 	 * @param splitPayload data needed for performing a token split
 	 * @returns split tokens
 	 */
-	public static async split(mintUrl: string, splitPayload: SplitPayload): Promise<SplitResponse> {
-		const data = await request<SplitResponse>({
+	public static async split(mintUrl: string, splitPayload: SplitPayload, customRequest?: typeof request): Promise<SplitResponse> {
+        const requestInstance = customRequest || request;
+		const data = await requestInstance<SplitResponse>({
 			endpoint: joinUrls(mintUrl, 'split'),
 			method: 'POST',
 			requestBody: splitPayload
@@ -158,7 +172,7 @@ class CashuMint {
 	 * @returns split tokens
 	 */
 	async split(splitPayload: SplitPayload): Promise<SplitResponse> {
-		return CashuMint.split(this._mintUrl, splitPayload);
+		return CashuMint.split(this._mintUrl, splitPayload, this._customRequest);
 	}
 	/**
 	 * Ask mint to perform a melt operation. This pays a lightning invoice and destroys tokens matching its amount + fees
@@ -166,8 +180,9 @@ class CashuMint {
 	 * @param meltPayload
 	 * @returns
 	 */
-	public static async melt(mintUrl: string, meltPayload: MeltPayload): Promise<MeltResponse> {
-		const data = await request<MeltResponse>({
+	public static async melt(mintUrl: string, meltPayload: MeltPayload, customRequest?: typeof request): Promise<MeltResponse> {
+        const requestInstance = customRequest || request;
+		const data = await requestInstance<MeltResponse>({
 			endpoint: joinUrls(mintUrl, 'melt'),
 			method: 'POST',
 			requestBody: meltPayload
@@ -189,7 +204,7 @@ class CashuMint {
 	 * @returns
 	 */
 	async melt(meltPayload: MeltPayload): Promise<MeltResponse> {
-		return CashuMint.melt(this._mintUrl, meltPayload);
+		return CashuMint.melt(this._mintUrl, meltPayload, this._customRequest);
 	}
 	/**
 	 * Estimate fees for a given LN invoice
@@ -199,9 +214,11 @@ class CashuMint {
 	 */
 	public static async checkFees(
 		mintUrl: string,
-		checkfeesPayload: { pr: string }
+		checkfeesPayload: { pr: string },
+        customRequest?: typeof request
 	): Promise<{ fee: number }> {
-		const data = await request<{ fee: number }>({
+        const requestInstance = customRequest || request;
+		const data = await requestInstance<{ fee: number }>({
 			endpoint: joinUrls(mintUrl, 'checkfees'),
 			method: 'POST',
 			requestBody: checkfeesPayload
@@ -220,7 +237,7 @@ class CashuMint {
 	 * @returns estimated Fee
 	 */
 	async checkFees(checkfeesPayload: { pr: string }): Promise<{ fee: number }> {
-		return CashuMint.checkFees(this._mintUrl, checkfeesPayload);
+		return CashuMint.checkFees(this._mintUrl, checkfeesPayload, this._customRequest);
 	}
 	/**
 	 * Checks if specific proofs have already been redeemed
@@ -230,9 +247,11 @@ class CashuMint {
 	 */
 	public static async check(
 		mintUrl: string,
-		checkPayload: CheckSpendablePayload
+		checkPayload: CheckSpendablePayload,
+        customRequest?: typeof request
 	): Promise<CheckSpendableResponse> {
-		const data = await request<CheckSpendableResponse>({
+        const requestInstance = customRequest || request;
+		const data = await requestInstance<CheckSpendableResponse>({
 			endpoint: joinUrls(mintUrl, 'check'),
 			method: 'POST',
 			requestBody: checkPayload
@@ -250,14 +269,16 @@ class CashuMint {
 	 * @returns redeemed and unredeemed ordered list of booleans
 	 */
 	async check(checkPayload: CheckSpendablePayload): Promise<CheckSpendableResponse> {
-		return CashuMint.check(this._mintUrl, checkPayload);
+		return CashuMint.check(this._mintUrl, checkPayload, this._customRequest);
 	}
 
 	public static async restore(
 		mintUrl: string,
-		restorePayload: { outputs: Array<SerializedBlindedMessage> }
+		restorePayload: { outputs: Array<SerializedBlindedMessage> },
+        customRequest?: typeof request
 	): Promise<PostRestoreResponse> {
-		const data = await request<PostRestoreResponse>({
+        const requestInstance = customRequest || request;
+		const data = await requestInstance<PostRestoreResponse>({
 			endpoint: joinUrls(mintUrl, 'restore'),
 			method: 'POST',
 			requestBody: restorePayload
@@ -273,7 +294,7 @@ class CashuMint {
 	async restore(restorePayload: {
 		outputs: Array<SerializedBlindedMessage>;
 	}): Promise<PostRestoreResponse> {
-		return CashuMint.restore(this._mintUrl, restorePayload);
+		return CashuMint.restore(this._mintUrl, restorePayload, this._customRequest);
 	}
 }
 
diff --git a/node_modules/@cashu/cashu-ts/src/CashuWallet.ts b/node_modules/@cashu/cashu-ts/src/CashuWallet.ts
index 8953ab8..2676204 100644
--- a/node_modules/@cashu/cashu-ts/src/CashuWallet.ts
+++ b/node_modules/@cashu/cashu-ts/src/CashuWallet.ts
@@ -1,7 +1,7 @@
 import { randomBytes } from '@noble/hashes/utils';
-import { CashuMint } from './CashuMint.js';
-import * as dhke from './DHKE.js';
-import { BlindedMessage } from './model/BlindedMessage.js';
+import { CashuMint } from './CashuMint';
+import * as dhke from './DHKE';
+import { BlindedMessage } from './model/BlindedMessage';
 import {
 	AmountPreference,
 	BlindedMessageData,
@@ -18,7 +18,7 @@ import {
 	SplitPayload,
 	Token,
 	TokenEntry
-} from './model/types/index.js';
+} from './model/types/index';
 import {
 	bytesToNumber,
 	cleanToken,
@@ -26,8 +26,8 @@ import {
 	getDecodedToken,
 	getDefaultAmountPreference,
 	splitAmount
-} from './utils.js';
-import { deriveBlindingFactor, deriveSecret, deriveSeedFromMnemonic } from './secrets.js';
+} from './utils';
+import { deriveBlindingFactor, deriveSecret, deriveSeedFromMnemonic } from './secrets';
 import { validateMnemonic } from '@scure/bip39';
 import { wordlist } from '@scure/bip39/wordlists/english';
 
@@ -81,13 +81,16 @@ class CashuWallet {
 	 * @param proofs (only the 'secret' field is required)
 	 * @returns
 	 */
-	async checkProofsSpent<T extends { secret: string }>(proofs: Array<T>): Promise<Array<T>> {
+	async checkProofsSpent<T extends { secret: string }>(proofs: Array<T>): Promise<{spent: Array<T>, pending: Array<T>}> {
 		const payload = {
 			//send only the secret
 			proofs: proofs.map((p) => ({ secret: p.secret }))
 		};
-		const { spendable } = await this.mint.check(payload);
-		return proofs.filter((_, i) => !spendable[i]);
+        const { spendable, pending: isPending } = await this.mint.check(payload);
+            
+        const spent = proofs.filter((_, i) => !spendable[i]);
+        const pending = isPending && Array.isArray(isPending) ? proofs.filter((_, i) => isPending[i]) : [];
+        return {spent, pending}
 	}
 	/**
 	 * Starts a minting process by requesting an invoice from the mint
@@ -183,6 +186,7 @@ class CashuWallet {
 		}
 		const tokenEntries: Array<TokenEntry> = [];
 		const tokenEntriesWithError: Array<TokenEntry> = [];
+        let errors: string[] = []
 		let newKeys: MintKeys | undefined;
 		for (const tokenEntry of decodedToken) {
 			if (!tokenEntry?.proofs?.length) {
@@ -192,8 +196,12 @@ class CashuWallet {
 				const {
 					proofsWithError,
 					proofs,
+                    error,
 					newKeys: newKeysFromReceive
 				} = await this.receiveTokenEntry(tokenEntry, preference, counter);
+                
+                if(error) {errors.push(error)}
+
 				if (proofsWithError?.length) {
 					tokenEntriesWithError.push(tokenEntry);
 					continue;
@@ -202,14 +210,14 @@ class CashuWallet {
 				if (!newKeys) {
 					newKeys = newKeysFromReceive;
 				}
-			} catch (error) {
-				console.error(error);
-				tokenEntriesWithError.push(tokenEntry);
+			} catch (error: any) {                
+				errors.push(error)				
 			}
 		}
 		return {
 			token: { token: tokenEntries },
 			tokensWithErrors: tokenEntriesWithError.length ? { token: tokenEntriesWithError } : undefined,
+            errors,
 			newKeys
 		};
 	}
@@ -228,6 +236,7 @@ class CashuWallet {
 	): Promise<ReceiveTokenEntryResponse> {
 		const proofsWithError: Array<Proof> = [];
 		const proofs: Array<Proof> = [];
+        let err: string | undefined = undefined;
 		let newKeys: MintKeys | undefined;
 		try {
 			const amount = tokenEntry.proofs.reduce((total, curr) => total + curr.amount, 0);
@@ -240,7 +249,7 @@ class CashuWallet {
 				preference,
 				counter
 			);
-			const { promises, error } = await CashuMint.split(tokenEntry.mint, payload);
+			const { promises } = await CashuMint.split(tokenEntry.mint, payload);
 			const newProofs = dhke.constructProofs(
 				promises,
 				blindedMessages.rs,
@@ -252,13 +261,14 @@ class CashuWallet {
 				tokenEntry.mint === this.mint.mintUrl
 					? await this.changedKeys([...(promises || [])])
 					: undefined;
-		} catch (error) {
-			console.error(error);
-			proofsWithError.push(...tokenEntry.proofs);
+		} catch (error: any) {            
+			err = String(error);
+ 			proofsWithError.push(...tokenEntry.proofs);
 		}
 		return {
 			proofs,
 			proofsWithError: proofsWithError.length ? proofsWithError : undefined,
+            error: err,
 			newKeys
 		};
 	}
@@ -306,7 +316,9 @@ class CashuWallet {
 				preference,
 				counter
 			);
-			const { promises } = await this.mint.split(payload);
+
+    	    const { promises } = await this.mint.split(payload);
+            
 			const proofs = dhke.constructProofs(
 				promises,
 				blindedMessages.rs,
@@ -538,8 +550,8 @@ class CashuWallet {
 		const secrets: Array<Uint8Array> = [];
 		const rs: Array<bigint> = [];
 		for (let i = 0; i < amounts.length; i++) {
-			let deterministicR = undefined;
-			let secret = undefined;
+			let deterministicR: bigint | undefined = undefined;
+			let secret: Uint8Array | undefined = undefined;
 			if (this._seed && counter != undefined) {
 				secret = deriveSecret(this._seed, keysetId ?? this.keysetId, counter + i);
 				deterministicR = bytesToNumber(
diff --git a/node_modules/@cashu/cashu-ts/src/DHKE.ts b/node_modules/@cashu/cashu-ts/src/DHKE.ts
index ca37559..02843b5 100644
--- a/node_modules/@cashu/cashu-ts/src/DHKE.ts
+++ b/node_modules/@cashu/cashu-ts/src/DHKE.ts
@@ -1,8 +1,8 @@
 import { ProjPointType } from '@noble/curves/abstract/weierstrass';
 import { secp256k1 } from '@noble/curves/secp256k1';
-import { encodeUint8toBase64 } from './base64.js';
-import { MintKeys, Proof, SerializedBlindedSignature } from './model/types/index.js';
-import { bytesToNumber } from './utils.js';
+import { encodeUint8toBase64 } from './base64';
+import { MintKeys, Proof, SerializedBlindedSignature } from './model/types/index';
+import { bytesToNumber } from './utils';
 import { sha256 } from '@noble/hashes/sha256';
 import { bytesToHex } from '@noble/curves/abstract/utils';
 
diff --git a/node_modules/@cashu/cashu-ts/src/index.ts b/node_modules/@cashu/cashu-ts/src/index.ts
index a321c04..200d96a 100644
--- a/node_modules/@cashu/cashu-ts/src/index.ts
+++ b/node_modules/@cashu/cashu-ts/src/index.ts
@@ -1,11 +1,11 @@
-import { CashuMint } from './CashuMint.js';
-import { CashuWallet } from './CashuWallet.js';
-import { setGlobalRequestOptions } from './request.js';
-import { generateNewMnemonic, deriveSeedFromMnemonic } from './secrets.js';
-import { getEncodedToken, getDecodedToken, deriveKeysetId, decodeInvoice } from './utils.js';
+import { CashuMint } from './CashuMint';
+import { CashuWallet } from './CashuWallet';
+import { setGlobalRequestOptions } from './request';
+import { generateNewMnemonic, deriveSeedFromMnemonic } from './secrets';
+import { getEncodedToken, getDecodedToken, deriveKeysetId, decodeInvoice } from './utils';
 import { decode } from '@gandlaf21/bolt11-decode';
 
-export * from './model/types/index.js';
+export * from './model/types/index';
 
 /**
  * @deprecated use decodeInvoice instead
diff --git a/node_modules/@cashu/cashu-ts/src/model/BlindedMessage.ts b/node_modules/@cashu/cashu-ts/src/model/BlindedMessage.ts
index 5a39883..5e71ff8 100644
--- a/node_modules/@cashu/cashu-ts/src/model/BlindedMessage.ts
+++ b/node_modules/@cashu/cashu-ts/src/model/BlindedMessage.ts
@@ -1,4 +1,4 @@
-import { SerializedBlindedMessage } from './types/index.js';
+import { SerializedBlindedMessage } from './types/index';
 import { ProjPointType } from '@noble/curves/abstract/weierstrass';
 
 class BlindedMessage {
diff --git a/node_modules/@cashu/cashu-ts/src/model/BlindedSignature.ts b/node_modules/@cashu/cashu-ts/src/model/BlindedSignature.ts
index e998f32..16c4488 100644
--- a/node_modules/@cashu/cashu-ts/src/model/BlindedSignature.ts
+++ b/node_modules/@cashu/cashu-ts/src/model/BlindedSignature.ts
@@ -1,5 +1,5 @@
 import { ProjPointType } from '@noble/curves/abstract/weierstrass';
-import { SerializedBlindedSignature } from './types/index.js';
+import { SerializedBlindedSignature } from './types/index';
 
 class BlindedSignature {
 	id: string;
diff --git a/node_modules/@cashu/cashu-ts/src/model/Split.ts b/node_modules/@cashu/cashu-ts/src/model/Split.ts
index dab9010..ea21a04 100644
--- a/node_modules/@cashu/cashu-ts/src/model/Split.ts
+++ b/node_modules/@cashu/cashu-ts/src/model/Split.ts
@@ -1,5 +1,5 @@
-import { BlindedMessage } from './BlindedMessage.js';
-import { Proof } from './types/index.js';
+import { BlindedMessage } from './BlindedMessage';
+import { Proof } from './types/index';
 
 class Split {
 	proofs: Array<Proof>;
diff --git a/node_modules/@cashu/cashu-ts/src/model/types/index.ts b/node_modules/@cashu/cashu-ts/src/model/types/index.ts
index 9a649c9..0e7f707 100644
--- a/node_modules/@cashu/cashu-ts/src/model/types/index.ts
+++ b/node_modules/@cashu/cashu-ts/src/model/types/index.ts
@@ -41,6 +41,8 @@ export type ReceiveTokenEntryResponse = {
 	 * If the mint has rotated keys, this field will be populated with the new keys.
 	 */
 	newKeys?: MintKeys;
+
+    error?: string | undefined
 };
 
 /**
@@ -76,6 +78,8 @@ export type ReceiveResponse = {
 	 * If the mint has rotated keys, this field will be populated with the new keys.
 	 */
 	newKeys?: MintKeys;
+
+    errors?: string[] | undefined
 };
 
 /**
@@ -215,6 +219,7 @@ export type CheckSpendableResponse = {
 	 * Ordered list for checked proofs. True if the secret has not been redeemed at the mint before
 	 */
 	spendable: Array<boolean>;
+    pending: Array<boolean>;
 } & ApiError;
 /**
  * blinded message for sending to the mint
diff --git a/node_modules/@cashu/cashu-ts/src/request.ts b/node_modules/@cashu/cashu-ts/src/request.ts
index 4bd636b..87b14d0 100644
--- a/node_modules/@cashu/cashu-ts/src/request.ts
+++ b/node_modules/@cashu/cashu-ts/src/request.ts
@@ -1,4 +1,4 @@
-import { checkResponse } from './utils';
+import { checkResponse, isObj } from './utils';
 
 type RequestArgs = {
 	endpoint: string;
@@ -34,8 +34,9 @@ async function _request({
 	const response = await fetch(endpoint, { body, headers, ...options });
 
 	if (!response.ok) {        
-		const { error, detail } = await response.json();
-		const message = error || detail || 'bad response';
+		const responseJson = await response.json();        
+        const { error, detail } = responseJson;        
+		const message = isObj(error) ? JSON.stringify(error) : error || detail || 'bad response';
 		throw new Error(message);
 	}
 
diff --git a/node_modules/@cashu/cashu-ts/src/utils.ts b/node_modules/@cashu/cashu-ts/src/utils.ts
index b25bde5..5e05afc 100644
--- a/node_modules/@cashu/cashu-ts/src/utils.ts
+++ b/node_modules/@cashu/cashu-ts/src/utils.ts
@@ -1,5 +1,5 @@
 import { decode } from '@gandlaf21/bolt11-decode';
-import { encodeBase64ToJson, encodeJsonToBase64 } from './base64.js';
+import { encodeBase64ToJson, encodeJsonToBase64 } from './base64';
 import {
 	AmountPreference,
 	InvoiceData,
@@ -8,8 +8,8 @@ import {
 	Token,
 	TokenEntry,
 	TokenV2
-} from './model/types/index.js';
-import { TOKEN_PREFIX, TOKEN_VERSION } from './utils/Constants.js';
+} from './model/types/index';
+import { TOKEN_PREFIX, TOKEN_VERSION } from './utils/Constants';
 import { bytesToHex } from '@noble/curves/abstract/utils';
 import { sha256 } from '@noble/hashes/sha256';
 import { Buffer } from 'buffer/';
