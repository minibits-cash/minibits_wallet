# App specific
.env
google-services.json
minibits-upload-key.keystore
GoogleService-Info.plist
minibits-prod-firebase-adminsdk.json
dist/

# OSX
#
.DS_Store

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
**/.xcode.env.local

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml
*.hprof
.cxx/
*.keystore
!debug.keystore
.kotlin/

# node.js
#
node_modules/
npm-debug.log
yarn-error.log

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

**/fastlane/report.xml
**/fastlane/Preview.html
**/fastlane/screenshots
**/fastlane/test_output

# Bundle artifact
*.jsbundle

# Ruby / CocoaPods
**/Pods/
/vendor/bundle/

# Temporary files created by Metro to check the health of the file watcher
.metro-health-check*

# testing
/coverage

# Yarn
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# other dev tooling
repomix-output.*
repomix*
mise.toml
mise.yaml

# temp dev scripts 2025-07-14 and beyond. will remove afterwards
key-mappings.json
replace-translation-keys.js


# for AI agents' one-off jobs, it's useful to use this workflow: tell them:

# explore the codebase and create a detailed, step by step plan how you're going to implement this feature. 
# don't do any implementations yet
# write this plan down in tasks.md as a list of markdown tasks - [ ], in root of the respoitory.
# then, start working on it, constantly re-evaluating how much his done and if it's done, then check off that particular task. 
# once they are all checked off, review the task list and double-check everything
tasks.md

# hot-updater
.hot-updater/output

